<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JavaScript对象的概念]]></title>
    <url>%2F2019%2F07%2F12%2FJavaScript%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[一 内建对象 -由es标准定义的对象,再任何es中都可以使用-比如Math String Number Boolean Object 二 宿主对象 -由Js的运行环境提供的对象,目前来讲主要针对浏览器提供的对象-BOM DOM 三 自建对象 -由开发人员自己创建的对象 创建对象 使用new关键字创建对象:var obj = new Object(); 字面量创建对象:var obj = {}; 属性名可以不加双引号,特殊字符除外 12345var obj2 = &#123; name = "io", age = 12, about = "" &#125;; 添加属性: 属性名不强制要求遵守标识符的规则,可任意操作,尽量见名知意: 语法:对象[“属性名”] = 属性值; []中可以直接传递一个变量,变量的值是多少,属性值就是多少 12345var a = "你好";obj[a];obj.name = "大哥大";obj.age = 12;obj["123"] = 321; 获取对象属性: 没有定义的属性返回undefined name = obj.name; 删除属性:delete obj.name; 属性值: 可以设置任意数据类型,包括object 12obj.name = "初音未来";obj2.japan = obj; japan的值,随着obj.name的变化而变化 使用in运算,检测是否具有某种属性 “属性名” in obj; 反参为blooean 内存关系基本数据类型,键值对保存在栈内存中,键值对之间没有直接联系引用数据类型,保存在堆内存当中,每创建一个对象,就会在堆内存中开辟一个空间用于存储对象内容对象名对应的是内存地址(对象的引用)]]></content>
      <categories>
        <category>前端工具</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式]]></title>
    <url>%2F2019%2F07%2F12%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[正则表达式的使用 var 变量 = new RegExp(“正则表达式”,”匹配模式”);var reg = /正则表达式/匹配模式 12var test = new RegExp();var reg = /[a-z]/-g 正则表达式可以使用 | 分开,表达式可以用[ ]装起来 a|b ==[ab] [a-z]任意小写字母 [A-Z]任意大写字母 [A-z]任意字母,不区别大小写 [^ab]除了ab的任意小写字母 [0-9]任意数字 [^0-9]除了数字 匹配模式可选值: -i 忽略大小写 -g 全局匹配模式 特殊: \w 任意字母,数字和下划线 [A-z0-9_] \W 除了字母数字和下划线 [^A-z0-9_] \d 任意数字 [0-9] \D 除了数字 [^0-9] \s 空格 \S 除了空格 \b 单词边界 [\bhello\b] -test(); 检查是否符合正则表达式,返回boolean值 量词: 控制变量出现的次数 a{n},a出现n次 只对它前边的内容控制次数 (ab){n},ab出现n次 可以设置出现范围 a{n,n},a出现n到n次 a{n,}a出现n次以上 a+,至少出现一次相当于a{1,} a*,零个或多个相当于a{0,} a?,零个或一个相当于a{0,1} ^a,是否是a开头 a%,是否是a结尾]]></content>
      <categories>
        <category>前端工具</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS简单的鼠标跟随事件思路]]></title>
    <url>%2F2019%2F07%2F11%2FJS%E7%AE%80%E5%8D%95%E7%9A%84%E9%BC%A0%E6%A0%87%E8%B7%9F%E9%9A%8F%E4%BA%8B%E4%BB%B6%E6%80%9D%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[简单的实现:设置一个方块,当鼠标移入窗口时,方块跟随鼠标,当鼠标移出时方块消失,提供思路,方块可替换素材 设置方块 12345#box1 &#123; width: 20px; height: 20px; position: absolute;//需要绝对定位方块才能移动 &#125; 获得方块和body 12var box = document.getElementById("box1");var bodywindow = document.documentElement; 给body设置鼠标移入事件 12345678910111213bodywindow.onmousemove = function (event) &#123; event = event || window.event; //pageX,pageY当对于页面的坐标,不兼容ie8 // var x = event.pageX; // var y = event.pageY; //由于浏览器不一样,认定的父元素不一致,所以需要这种方式获得父元素并获得滚动坐标 var st = document.body.scrollTop || document.documentElement.scrollTop; var sl = document.body.scrollLeft || document.documentElement.scrollLeft; //设置偏移量,使用event封装的对象获得属性并且拼串获得string box.style.left = event.clientX + sl + "px"; box.style.top = event.clientY + st + "px"; box.style.backgroundColor = "aqua"; &#125; 设置鼠标移出事件 123bodywindow.onmouseout = function () &#123; box.style.backgroundColor = "white" &#125; 效果展示]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>鼠标事件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html表单汇总]]></title>
    <url>%2F2019%2F07%2F11%2FHtml%E8%A1%A8%E5%8D%95%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[不包含h5 form标签 form是表单标签,属性action是服务器地址 &lt;labie&gt;设置表达提示文字 其中可以设置属性for=”id” &lt;fieldset&gt;设置分组 其中再使用&lt;legend&gt;可以设置分组名 12&lt;form action="#"&gt;&lt;/form&gt; 表单元素必须在form标签中 typeinput type=”text”为文本输入框input type=”passworld”为密码框,设置name值指定回调input type=”submit”为提交按钮,可以在后面加value属性指定显示的文字 当希望提交到服务器时,需要给此属性加上name指定唯一性 value可以指定默认值 disabled = “disable” 不可用 123用户:&lt;input type="text" name="uesrname" /&gt;密码:&lt;input type="password" name="uesrpassworld" /&gt;&lt;input type="submit" value="提交" /&gt; input type=”radio单选框” name属性设置同一个组 value属性设置回调12性别&lt;input type="radio" name="man" value="man" /&gt;男 &lt;input type="radio" name="man" value="wuman" checked="checked" /&gt;女 input type=”checkbox”多选框 name属性设置分组 value设置属性回调 checked=”checked”默认选中1234最爱的游戏:&lt;input type="checkbox" name="game" value="1" /&gt;刺客信条 &lt;input type="checkbox" name="game" value="2" /&gt;巫师3 &lt;input type="checkbox" name="game" value="3" /&gt;地铁2033 &lt;input type="checkbox" name="game" value="4" /&gt;赛博朋克2077 select 设置下拉列表 name属性 option标签设置拉下选项 value属性回调 selected=”selected”默认选中 multiple=”multiple”设置为多选下拉列表 &lt;optgroup label=&quot;组名&quot;&gt;可以设置下拉列表的分组123456游戏:&lt;select name="game"&gt; &lt;option value="1"&gt;刺客信条&lt;/option&gt; &lt;option value="2"&gt;巫师3&lt;/option&gt; &lt;option value="3"&gt;地铁2033&lt;/option&gt; &lt;option value="4" selected="selected"&gt;赛博朋克2077&lt;/option&gt; &lt;/select&gt; textarea设置文本域 placeolder设置提示文字 &lt;input type=&quot;reset&quot; value=&quot;reset&quot; /&gt;* &lt;input type=&quot;button&quot;&gt; 空白按钮*1&lt;textarea name="myself" id="me" cols="30" rows="10" placeholder="自我介绍"&gt;&lt;/textarea&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>表单</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css高度塌陷解决方式]]></title>
    <url>%2F2019%2F07%2F11%2Fcss%E9%AB%98%E5%BA%A6%E5%A1%8C%E9%99%B7%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[overflow:hidden1开启BFC 对父元素使用overflow:hidden1以开启BFC模式,需要同时使用zoom:1兼容ie6以下版本12345678910.inbox &#123; width: 100px; height: 100px; background-color: black; float: left; &#125; .box1 &#123; overflow: hidden; border: 5px solid red; &#125; clear清除浮动影响 对被产生影响的元素使用clear清除浮动影响 可选值 none 默认不清除 left 清除左侧 rght 清除右侧 both 清除两侧12345678910111213141516171819.box2 &#123; float: left; width: 200px; height: 200px; background-color: rgb(100, 52, 52); &#125; .box3 &#123; clear: both; border: 5px solid skyblue; zoom: 1; &#125; .inbox2 &#123; float: left; width: 300px; height: 300px; background-color: rgb(68, 153, 156); &#125; after 设置after和before伪类,加入空白,使用display设置为表格元素,使用clear清除浮动,完美解决高度塌陷和父子元素外边距重叠的问题 不兼容ie6,使用zoom:1完成兼容12345.box3:after, .box3:before &#123; content: ""; display: table; clear: both;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git的常用命令]]></title>
    <url>%2F2019%2F07%2F11%2Fgit%2F</url>
    <content type="text"><![CDATA[文件目录操作命令12341 mkdir * 创建一个空目录 *指目录名2 pwd 显示当前目录的路径。3 cat * 查看*文件内容4 git rm * 删除**文件 git初始化操作123451 git init 把当前的目录变成git仓库，生成隐藏.git文件。2 git remote add origin url 把本地仓库的内容推送到GitHub仓库。3 git clone git@url/test.git 从远程库克隆4 git add * 把x文件添加到暂存区去。5 git commit –m "*" 提交文件 –m 后面的是注释。 git 克隆分支1231 git clone xxx.git 最简单直接的命令2 git clone xxx.git "指定目录" clone到指定目录3 git clone -b branchname xxx.git clone时创建新的分支替代默认Origin HEAD（master） clone 远程分支 git clone 命令默认的只会建立master分支，如果你想clone指定的某一远程分支(如：dev)的话，可以如下： 1. 查看所有分支(包括隐藏的) git branch -a 显示所有分支 12341 * master2 remotes/origin/HEAD -&gt; origin/master3 remotes/origin/dev4 remotes/origin/master 2. 在本地新建同名的(“dev”)分支，并切换到该分支 121 git checkout -t origin/dev 该命令等同于：2 git checkout -b dev origin/dev 查看命令123451 git status 查看仓库状态2 git diff * 查看X文件修改了那些内容 3 git log 查看历史记录4 git reflog 查看历史记录的版本号id（记录你的每一次命令,不论是否提交）5 git log --pretty=oneline 如果信息量太多可以进行比较好的列表显示 版本回退1231 git reset –hard HEAD^ 回退到上一个版本2 git reset --hard HEAD~第几个 如果想回退到第3个版本，使用git reset –hard HEAD~33 git reset --hard 057d 回退到某一个具体的版本号 撤销修改1231 git checkout file-name 恢复某个已修改的文件（撤销未提交的修改）：2 git revert HEAD 还原最近一次提交的修改：3 git revert commit-id 还原指定版本的修改 分支管理1234567891011121314 1 git branch 查看本地所有的分支 2 git branch -a 查看远程所有的分支 3 git branch name 创建分支 4 git branch –d dev 删除dev分支 5 git push origin --delete dev 删除远程的dev分支 6 git branch -m dev develop 重命名分支 7 git checkout –b dev 创建dev分支 并切换到dev分支上 8 git merge dev 在当前分支上合并dev分支代 9 git push origin zyf-dev 把当前新疆的zyf-dev分支推送到远程库(远程仓库没有给分支则会新建立该分支) 10 git checkout — * 把XX文件在工作区的修改全部撤销。11 git checkout master 切换回master分支12 git push --set-upstream origin dev 提交修改并创建远程分支dev ##tag 相关操作 1234561 git tag 列出所有的tag2 git tag name 打轻量标签 name3 git tag -d name 删除本地的tag4 git push origin --delete tag name 删除远程的tag5 git show name 查看tag信息6 git push origin name 将tag提交到远程 隐藏的文件123451 git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作2 git stash list 查看所有被隐藏的文件列表3 git stash apply 恢复被隐藏的文件，但是内容不删除4 git stash drop 删除文件5 git stash pop 恢复文件的同时 也删除文件 查看远程库信息(git remote的用法)123451 git remote 查看远程库的信息2 git remote –v 查看远程库的详细信息3 git remote add name url 添加远程仓库4 git remote rename oldname newname 重命名仓库5 git remote rm 删除仓库 将远程分支拉取到本地1 方法一：git checkout -b 本地分支名x origin/远程分支名x2 方式二：git fetch origin 远程分支名x:本地分支名x git pull操作12345678910111213141516171819 1 git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并，基本的格式如下。 2 $ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; 3 4 取回origin主机的next分支，与本地的master分支合并，需要写成下面这样 5 $ git pull origin next:master 6 7 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。 8 $ git pull origin next 9 10 上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。11 $ git fetch origin12 $ git merge origin/next13 14 在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。15 Git也允许手动建立追踪关系。16 git branch --set-upstream master origin/next17 18 上面命令指定master分支追踪origin/next分支。如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。19 $ git pull origin git 设置大小写敏感Windows上的Git默认是大小写不敏感的，这样多平台写作就可能会出现问题。Win上的Git设置为大小写敏感的命令如下 1 git config core.ignorecase false git 设置忽略文件或文件夹权限修改1 git config core.filemode false 创建追踪分支不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。 12345$ git config --global push.default matching# 或者$ git config --global push.default simple (最好使用这种方式) $ git branch --track master origin/master //在使用 git branch 命令时加上 '--track' 参数, 来手动创建一个追踪分支 切换git 命令提示中文到英文// ubuntu装的git不知道怎么就出现全中文的提示,不太好,果断切换到中文了,切换方法如下:// 1:写入echo “alias git=’LANG=en_GB git’” &gt;&gt; ~/.bashrc // 2:生效source ~/.bashrc git 删除未添加到版本中的文件或者文件夹git checkout 只能回退在版本中的修改或者删除, 对于新添加的文件是没有作用的, 也就是说, 新建的文件或者文件夹是:Untracked files, 要删除或者清理掉这些文件,需要使用 git clean 命令: 12345678910111213 1 // 删除 untracked files 2 git clean -f 3 4 // 连 untracked 的目录也一起删掉 5 git clean -fd 6 7 // 连 gitignore的untrack 文件/目录也一起删掉 （一般这个是用来删掉编译出来的 .o一类的文件） 8 git clean -xfd 9 10 // 在使用清理 git clean之前，建议加上 -n 来先看看会删掉哪些文件，防止重要文件被误删11 git clean -nxfd12 git clean -nf13 git clean -nfd 常出错误：1：There is no tracking information for the current branch… 则说明本地分?支和远程分?支的链接关系没有创建，用命令： git branch –set-upstream branch-name origin/branch-name。 2: ![rejected] dev -&gt; dev (non-fast-forward) … Updates were rejected because the tip of your current branch 推送失败，因为远程代码的最新提交和你试图推送的提交有冲突，解决办法也很简单，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送 3：CONFLICT (content): Merge conflict in . . . 这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突一样。解决后，提交，再push： 4: You are not currently on a branch, so I cannot use any 解决办法：git checkout master 5：Your branch is behind ‘origin/master’ by 1 commit, and can be fast-forwarded. 上面的显示的意思是，有一个更新还没有反应到本地来，可能是别人往server上提交了一点东西。 可以使用git pull命令拿这些更新到本地来。 6：在执行 git push 时可能会看到如下消息: warning: push.default is unset; its implicit value is changing inGit 2.0 from ‘matching’ to ‘simple’. To squelch this messageand maintain the current behavior after the default changes, use:git config –global push.default matchingTo squelch this message and adopt the new behavior now, use: git config –global push.default simpl 解决办法：‘matching’ 参数是 Git 1.x 的默认行为，如果你执行 git push 但没有指定分支，它将 push 所有你本地的分支到远程仓库中对应匹配的分支。而 Git 2.x 默认的是 simple，意味着执行 git push 没有指定分支时，只有当前分支会被 push 到你使用 git pull 获取的代码。根据提示，修改git push: 1 git config –global push.default matching 再次执行git push 就行了。 7：You asked to pull from the remote ‘origin’, but did not specify:a branch. Because this is not the default configured remotefor your current branch, you must specify a branch on the command line. 解决办法：找到：.git/config 修改如下 1231 [branch "master"]2 remote = origin3 merge = refs/heads/master 8：ERROR: Permission to user1/test.git denied to user2 fatal: The remote end hung up unexpectedly 账户冲突，下面有针对讲解 9: 添加的ssh不起作用？ ssh 的添加一定要在root用户权限在添加，其他的权限不起作用，切记！ 经验之谈：1：git revert 和 git reset的区别开始感觉两者一样，但是在客户端和命令行窗口操作之后发现大大的不同，看一个例子：我先提交三次1,2,3 id号分别是（15d5f70,a167eb1,8fbfe3f）如下图 然后执行版本回退 git reset –hard a167 如图： 说明执行git reset –hard ** 版本回退是撤销某次提交，但是此次之后的修改都会被退回到暂存区，因为上面显示有提交（by 1 commit）同理执行 git revert –hard a167git revert是用一次新的commit来回滚之前的commit 在回滚操作上看，效果一样。但是在日后继续merge以前的老版本时有区别。revert是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，但是reset是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入。得到结论：git reset 是把HEAD向后移动了一下，而git revert是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。 这样在版本回退的时候就比较的好，比如本地dev分支，远程master分支，某一次的上线发现线上有重大的bug，然后你reset本地代码到前一个版本，在你git push 的时候git会报一个错误：“说你的本地分支版本低于远程master分支的版本，让你先去pull 下来代码，再提交”，这就不行了，你pull下来的代码还是最新版有bug的代码，不进行pull代码，master分支又不让你提交。解决这个问题还得使用 revert 来进行 “回退”操作，为什么加引号呢，是因为这种回退是向前提交一次中和了上次的修改，这就比较好了，这样你revert之后相当于指针向前移动一次，本地版本dev高于远程master版本，这时你就可以git push 本地代码到远程了。也就是说，git reset 对未提交到（git push）远程的修改做回滚比较好，如果要回滚本地，同时想远程也回滚，就要用到revert 常用修改：1：避免每次提交都输入用户名和密码 原因是使用了https方式 puh 在termail里边 输入 git remote -v 可以看到形如一下的返回结果 origin https://github.com/git/librarysystem.git(fetch) origin https://github.com/git/librarysystem.git(push) 下面把它换成ssh方式的。 git remote rm origin git remote add origin git@github.com:yu/demo.git git push origin 2：添加忽略文件 .gitignore .gitignore配置文件用于配置不需要加入版本管理的文件。 配置语法： “/“ 开头表示目录； “*” 通配多个字符； “?” 通配单个字符 “[]” 包含单个字符的匹配列表； “!” 表示不忽略(跟踪)匹配到的文件或目录； 说明：git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效； 示例：（1） foder/* 忽略目录foder下的全部内容,不管是根目录下的 /foder/ 目录，还是某个子目录 /list/foder/ 目录，都会被忽略。 （2） /foder/* 说明：忽略根目录下的 /foder/ 目录的全部内容； （3） /*!.gitignore !/fw/bin/ !/fw/sf/ 说明：忽略全部内容，但是不忽略 .gitignore文件,根目录下的 /fw/bin/ 和 /fw/sf/ 注意问题： .gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把要忽略的文件纳入了版本库，就不起作用了。 3：如何在同一台电脑上使用两个git账户 问题描述：作为程序员有时候是有多个的项目，而且每个项目git的用户名，邮箱等，都不一样。就我来说，我在github上有一个账号，自己开发一些东西，同时我参与的也有项目需要连接别人的github账号，在我电脑上只有一个git客户端，本地一个身份用户，开始的时候我自己开发是用ssh方式，参与的项目的是用https连接，但是https每次都需要输入密码，非常不方便，所以想转成ssh连接，利用命令： $ git remote rm origin$ git remote add origin git@github.com:yu/demo.git$ git push origin转换成功，不幸的是push的时候出错了：ERROR: Permission to user1 denied to这种情况的解决方式是方法，使用本地托管多个个ssh的密钥，不同的账号是用不同的密匙。 第一步：生成SSH Key执行命令，如下图： 具体说明： 12345671 $ ssh-keygen -t rsa -C "your_email@youremail.com"2 Creates a new ssh key using the provided email Generating public/private rsa key pair.3 #输入将要保存的路径，我的默认为当前路径（/c/Users/zhaoyafei/.ssh/id_rsa）,但是不能使用默认文件id_rsa，要添加新账户就要生起一个成新的好记的名字，例如id_rsa_work4 Enter file in which to save the key (/c/Users/zhaoyafei/.ssh/id_rsa):5 #输入回车后提示输入一个类似于密码的号，直接回车就行6 Enter passphrase (empty for no passphrase):7 Enter same passphrase again: 第二步：识别新的私钥默认SSH只会读取id_rsa，所以为了让SSH识别新的私钥，需要将其添加到SSH agent 1 ssh-add ～/.ssh/id_rsa_work2 //该命令如果报错：Could not open a connection to your authentication agent.可执行 ssh-agent bash 命令后再执行ssh-add -l 看是否成功。 执行命令，如下图： 第三步：修改config文件该文件用于配置私钥对应的服务器。内容如下:1234567891011 1 # Default github （默认的） 2 Host github.com 3 HostName github.com 4 User git 5 IdentityFile ~/.ssh/id_rsa 6 7 # second user(work@gmail.com) 8 Host github_work 9 HostName github.com10 User git11 IdentityFile ~/.ssh/id_rsa_work 这样配置，也就是使用hostname为github.com会根据用户名的不同，去使用不用的private key。github上，也可以添加对应的公钥。其实这个配置是关于ssh的与git无关，只是git使用的方式是ssh的方式。Host可随意，方便自己记忆，后续在添加remote是还需要用到。第四步：将SSH key输入到GitHub网站中将生成的id_rsa_work.pub输入到GitHub网站中就可以了，输入完成后单击Add key后，会看到git-tutorial已经被添加进去了。 配置完成后，在连接非默认帐号的github仓库时，远程库的地址要对应地做一些修改，比如现在添加abc帐号下的一个仓库test，则需要这样添加：git remote add test git@github-work:abc/test.git #并非原来的git@github.com:abc/test.git 这样每次连接都会使用id_rsa_abc与服务器进行连接。 注意：github根据配置文件的user.email来获取github帐号显示author信息，所以对于多帐号用户一定要记得将user.email改为相应的email(work@mail.com)。我遇到的问题是本地单一用户，链接不同的github账号，所以用户配置可以采用全局配置。如果不同本地用户（不同的身份标识，即需要本地使用不同的用户名），那么git就不要使用有–global的配置，可以按照下面的方法： 1234561 1)设置局部的user.name和user.email2 git config user.name "xxxxxx"3 git config user.email "xxx@xxx.com"4 2)设置全局的user.name和user.email5 git config --global user.name "xxxxxx"6 git config –-global user.email ""]]></content>
      <categories>
        <category>前端工具</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
</search>
